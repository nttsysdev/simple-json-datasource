{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","options","query","buildQueryParameters","targets","filter","t","hide","variables","getVariables","when","data","getAdhocFilters","adhocFilters","doRequest","method","vars","key","item","current","then","response","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","interpolated","target","mapToTextValue","_","map","d","i","text","value","isObject","datasourceRequest","scopedVars","refId","Promise","resolve","reject"],"mappings":";;;;;;;;;AAAA;;;;;;;;IAEaA,iB,WAAAA,iB;AAEX,6BAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACzD,SAAKC,IAAL,GAAYJ,iBAAiBI,IAA7B;AACA,SAAKC,GAAL,GAAWL,iBAAiBK,GAA5B;AACA,SAAKC,IAAL,GAAYN,iBAAiBM,IAA7B;AACA,SAAKC,CAAL,GAASN,EAAT;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKK,eAAL,GAAuBR,iBAAiBQ,eAAxC;AACA,SAAKC,OAAL,GAAe,EAAC,gBAAgB,kBAAjB,EAAf;AACA,QAAI,OAAOT,iBAAiBU,SAAxB,KAAsC,QAAtC,IAAkDV,iBAAiBU,SAAjB,CAA2BC,MAA3B,GAAoC,CAA1F,EAA6F;AAC3F,WAAKF,OAAL,CAAa,eAAb,IAAgCT,iBAAiBU,SAAjD;AACD;AACF;;;;0BAEKE,O,EAAS;AACb,UAAIC,QAAQ,KAAKC,oBAAL,CAA0BF,OAA1B,CAAZ;AACAC,YAAME,OAAN,GAAgBF,MAAME,OAAN,CAAcC,MAAd,CAAqB;AAAA,eAAK,CAACC,EAAEC,IAAR;AAAA,OAArB,CAAhB;;AAEAL,YAAMM,SAAN,GAAkB,KAAKC,YAAL,EAAlB;;AAEA,UAAIP,MAAME,OAAN,CAAcJ,MAAd,IAAwB,CAA5B,EAA+B;AAC7B,eAAO,KAAKJ,CAAL,CAAOc,IAAP,CAAY,EAACC,MAAM,EAAP,EAAZ,CAAP;AACD;;AAED,UAAI,KAAKnB,WAAL,CAAiBoB,eAArB,EAAsC;AACpCV,cAAMW,YAAN,GAAqB,KAAKrB,WAAL,CAAiBoB,eAAjB,CAAiC,KAAKjB,IAAtC,CAArB;AACD,OAFD,MAEO;AACLO,cAAMW,YAAN,GAAqB,EAArB;AACD;;AAED,aAAO,KAAKC,SAAL,CAAe;AACpBpB,aAAK,KAAKA,GAAL,GAAW,QADI;AAEpBiB,cAAMT,KAFc;AAGpBa,gBAAQ;AAHY,OAAf,CAAP;AAKD;;;mCAEc;AACb,UAAIC,OAAO,EAAX;AACA,UAAI,CAAC,KAAKxB,WAAN,IAAqB,CAAC,KAAKA,WAAL,CAAiBgB,SAA3C,EAAsD,OAAOQ,IAAP;;AAEtD,WAAK,IAAIC,GAAT,IAAgB,KAAKzB,WAAL,CAAiBgB,SAAjC,EAA4C;AAC1C,YAAIU,OAAO,KAAK1B,WAAL,CAAiBgB,SAAjB,CAA2BS,GAA3B,CAAX;AACAD,aAAKE,KAAKvB,IAAV,IAAkBuB,KAAKC,OAAvB;AACD;AACD,aAAOH,IAAP;AACD;;;qCAEgB;AACf,aAAO,KAAKF,SAAL,CAAe;AACpBpB,aAAK,KAAKA,GAAL,GAAW,GADI;AAEpBqB,gBAAQ;AAFY,OAAf,EAGJK,IAHI,CAGC,oBAAY;AAClB,YAAIC,SAASC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,iBAAO,EAAEA,QAAQ,SAAV,EAAqBC,SAAS,wBAA9B,EAAwDC,OAAO,SAA/D,EAAP;AACD;AACF,OAPM,CAAP;AAQD;;;oCAEevB,O,EAAS;AACvB,UAAIC,QAAQ,KAAKV,WAAL,CAAiBiC,OAAjB,CAAyBxB,QAAQyB,UAAR,CAAmBxB,KAA5C,EAAmD,EAAnD,EAAuD,MAAvD,CAAZ;AACA,UAAIyB,kBAAkB;AACpBC,eAAO3B,QAAQ2B,KADK;AAEpBF,oBAAY;AACV/B,gBAAMM,QAAQyB,UAAR,CAAmB/B,IADf;AAEVkC,sBAAY5B,QAAQyB,UAAR,CAAmBG,UAFrB;AAGVC,kBAAQ7B,QAAQyB,UAAR,CAAmBI,MAHjB;AAIVC,qBAAW9B,QAAQyB,UAAR,CAAmBK,SAJpB;AAKV7B,iBAAOA;AALG,SAFQ;AASpB8B,kBAAU/B,QAAQ+B;AATE,OAAtB;;AAYA,aAAO,KAAKlB,SAAL,CAAe;AACpBpB,aAAK,KAAKA,GAAL,GAAW,cADI;AAEpBqB,gBAAQ,MAFY;AAGpBJ,cAAMgB;AAHc,OAAf,EAIJP,IAJI,CAIC,kBAAU;AAChB,eAAOa,OAAOtB,IAAd;AACD,OANM,CAAP;AAOD;;;oCAEeT,K,EAAO;AACrB,UAAIgC,eAAe;AACfC,gBAAQ,KAAK3C,WAAL,CAAiBiC,OAAjB,CAAyBvB,KAAzB,EAAgC,IAAhC,EAAsC,OAAtC;AADO,OAAnB;;AAIA,aAAO,KAAKY,SAAL,CAAe;AACpBpB,aAAK,KAAKA,GAAL,GAAW,SADI;AAEpBiB,cAAMuB,YAFc;AAGpBnB,gBAAQ;AAHY,OAAf,EAIJK,IAJI,CAIC,KAAKgB,cAJN,CAAP;AAKD;;;mCAEcH,M,EAAQ;AACrB,aAAOI,iBAAEC,GAAF,CAAML,OAAOtB,IAAb,EAAmB,UAAC4B,CAAD,EAAIC,CAAJ,EAAU;AAClC,YAAID,KAAKA,EAAEE,IAAP,IAAeF,EAAEG,KAArB,EAA4B;AAC1B,iBAAO,EAAED,MAAMF,EAAEE,IAAV,EAAgBC,OAAOH,EAAEG,KAAzB,EAAP;AACD,SAFD,MAEO,IAAIL,iBAAEM,QAAF,CAAWJ,CAAX,CAAJ,EAAmB;AACxB,iBAAO,EAAEE,MAAMF,CAAR,EAAWG,OAAOF,CAAlB,EAAP;AACD;AACD,eAAO,EAAEC,MAAMF,CAAR,EAAWG,OAAOH,CAAlB,EAAP;AACD,OAPM,CAAP;AAQD;;;8BAEStC,O,EAAS;AACjBA,cAAQJ,eAAR,GAA0B,KAAKA,eAA/B;AACAI,cAAQH,OAAR,GAAkB,KAAKA,OAAvB;;AAEA,aAAO,KAAKP,UAAL,CAAgBqD,iBAAhB,CAAkC3C,OAAlC,CAAP;AACD;;;yCAEoBA,O,EAAS;AAAA;;AAC5B;AACAA,cAAQG,OAAR,GAAkBiC,iBAAEhC,MAAF,CAASJ,QAAQG,OAAjB,EAA0B,kBAAU;AACpD,eAAO+B,OAAOA,MAAP,KAAkB,eAAzB;AACD,OAFiB,CAAlB;;AAIA,UAAI/B,UAAUiC,iBAAEC,GAAF,CAAMrC,QAAQG,OAAd,EAAuB,kBAAU;AAC7C,eAAO;AACL+B,kBAAQ,MAAK3C,WAAL,CAAiBiC,OAAjB,CAAyBU,OAAOA,MAAhC,EAAwClC,QAAQ4C,UAAhD,EAA4D,OAA5D,CADH;AAELC,iBAAOX,OAAOW,KAFT;AAGLvC,gBAAM4B,OAAO5B,IAHR;AAILd,gBAAM0C,OAAO1C,IAAP,IAAe;AAJhB,SAAP;AAMD,OAPa,CAAd;;AASAQ,cAAQG,OAAR,GAAkBA,OAAlB;;AAEA,aAAOH,OAAP;AACD;;;+BAEUA,O,EAAS;AAAA;;AAClB,aAAO,IAAI8C,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,eAAKnC,SAAL,CAAe;AACbpB,eAAK,OAAKA,GAAL,GAAW,WADH;AAEbqB,kBAAQ,MAFK;AAGbJ,gBAAMV;AAHO,SAAf,EAIGmB,IAJH,CAIQ,kBAAU;AAChB,iBAAO4B,QAAQf,OAAOtB,IAAf,CAAP;AACD,SAND;AAOD,OARM,CAAP;AASD;;;iCAEYV,O,EAAS;AAAA;;AACpB,aAAO,IAAI8C,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,eAAKnC,SAAL,CAAe;AACbpB,eAAK,OAAKA,GAAL,GAAW,aADH;AAEbqB,kBAAQ,MAFK;AAGbJ,gBAAMV;AAHO,SAAf,EAIGmB,IAJH,CAIQ,kBAAU;AAChB,iBAAO4B,QAAQf,OAAOtB,IAAf,CAAP;AACD,SAND;AAOD,OARM,CAAP;AASD","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    query.variables = this.getVariables();\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    if (this.templateSrv.getAdhocFilters) {\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    } else {\n      query.adhocFilters = [];\n    }\n\n    return this.doRequest({\n      url: this.url + '/query',\n      data: query,\n      method: 'POST'\n    });\n  }\n\n  getVariables() {\n    var vars = {};\n    if (!this.templateSrv || !this.templateSrv.variables) return vars;\n\n    for (var key in this.templateSrv.variables) {\n      var item = this.templateSrv.variables[key];\n      vars[item.name] = item.current;\n    }\n    return vars;\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + '/search',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n  getTagKeys(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-keys',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n  getTagValues(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-values',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n}\n"]}